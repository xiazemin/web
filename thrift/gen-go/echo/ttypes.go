// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package echo

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Help struct {
	Name *string `thrift:"name,1" json:"name"`
	Time int32   `thrift:"time,2,required" json:"time"`
}

func NewHelp() *Help {
	return &Help{}
}

var Help_Name_DEFAULT string

func (p *Help) GetName() string {
	if !p.IsSetName() {
		return Help_Name_DEFAULT
	}
	return *p.Name
}

func (p *Help) GetTime() int32 {
	return p.Time
}
func (p *Help) IsSetName() bool {
	return p.Name != nil
}

func (p *Help) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Help) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *Help) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Time = v
	}
	return nil
}

func (p *Help) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Help"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Help) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return fmt.Errorf("%T.name (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:name: %s", p, err)
		}
	}
	return err
}

func (p *Help) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("time", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:time: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Time)); err != nil {
		return fmt.Errorf("%T.time (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:time: %s", p, err)
	}
	return err
}

func (p *Help) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Help(%+v)", *p)
}

type EchoReq struct {
	Msg    string  `thrift:"msg,1" json:"msg"`
	Trace  string  `thrift:"trace,2,required" json:"trace"`
	Option *string `thrift:"option,3" json:"option"`
	Help   *Help   `thrift:"help,4" json:"help"`
}

func NewEchoReq() *EchoReq {
	return &EchoReq{}
}

func (p *EchoReq) GetMsg() string {
	return p.Msg
}

func (p *EchoReq) GetTrace() string {
	return p.Trace
}

var EchoReq_Option_DEFAULT string

func (p *EchoReq) GetOption() string {
	if !p.IsSetOption() {
		return EchoReq_Option_DEFAULT
	}
	return *p.Option
}

var EchoReq_Help_DEFAULT *Help

func (p *EchoReq) GetHelp() *Help {
	if !p.IsSetHelp() {
		return EchoReq_Help_DEFAULT
	}
	return p.Help
}
func (p *EchoReq) IsSetOption() bool {
	return p.Option != nil
}

func (p *EchoReq) IsSetHelp() bool {
	return p.Help != nil
}

func (p *EchoReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EchoReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *EchoReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Trace = v
	}
	return nil
}

func (p *EchoReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Option = &v
	}
	return nil
}

func (p *EchoReq) ReadField4(iprot thrift.TProtocol) error {
	p.Help = &Help{}
	if err := p.Help.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Help, err)
	}
	return nil
}

func (p *EchoReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EchoReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EchoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return fmt.Errorf("%T.msg (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msg: %s", p, err)
	}
	return err
}

func (p *EchoReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trace", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:trace: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Trace)); err != nil {
		return fmt.Errorf("%T.trace (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:trace: %s", p, err)
	}
	return err
}

func (p *EchoReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOption() {
		if err := oprot.WriteFieldBegin("option", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:option: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Option)); err != nil {
			return fmt.Errorf("%T.option (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:option: %s", p, err)
		}
	}
	return err
}

func (p *EchoReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHelp() {
		if err := oprot.WriteFieldBegin("help", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:help: %s", p, err)
		}
		if err := p.Help.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Help, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:help: %s", p, err)
		}
	}
	return err
}

func (p *EchoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoReq(%+v)", *p)
}

type EchoRes struct {
	Msg string `thrift:"msg,1" json:"msg"`
}

func NewEchoRes() *EchoRes {
	return &EchoRes{}
}

func (p *EchoRes) GetMsg() string {
	return p.Msg
}
func (p *EchoRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EchoRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *EchoRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EchoRes"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EchoRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return fmt.Errorf("%T.msg (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msg: %s", p, err)
	}
	return err
}

func (p *EchoRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoRes(%+v)", *p)
}
